openapi: 3.0.3
info:
  title: Form Designer API
  description: RESTful API for creating, managing, and exporting form definitions
  version: 1.0.0
  contact:
    name: FrameworkQ.Formflow

servers:
  - url: http://localhost:5000
    description: Development server
  - url: https://api.formdesigner.example.com
    description: Production server

tags:
  - name: Forms
    description: Form definition CRUD operations
  - name: Export
    description: Form export operations (YAML, SQL)

paths:
  /api/forms:
    get:
      summary: List all form definitions
      description: Retrieve all active form definitions with optional filter for inactive forms
      operationId: listForms
      tags:
        - Forms
      parameters:
        - name: includeInactive
          in: query
          description: Include soft-deleted forms
          required: false
          schema:
            type: boolean
            default: false
      responses:
        '200':
          description: Successful response
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/FormSummary'
        '500':
          description: Internal server error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'

    post:
      summary: Create new form definition
      description: Create a new form definition with validation
      operationId: createForm
      tags:
        - Forms
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/FormDefinitionRoot'
      responses:
        '201':
          description: Form created successfully
          headers:
            Location:
              description: URI of created form
              schema:
                type: string
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/FormDefinitionRoot'
        '400':
          description: Validation error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ValidationError'
        '409':
          description: Form with this ID already exists
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        '500':
          description: Internal server error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'

  /api/forms/{id}:
    get:
      summary: Get form definition by ID
      description: Retrieve a specific form definition
      operationId: getFormById
      tags:
        - Forms
      parameters:
        - name: id
          in: path
          description: Form ID
          required: true
          schema:
            type: string
            pattern: '^[a-z0-9_-]+$'
      responses:
        '200':
          description: Successful response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/FormDefinitionRoot'
        '404':
          description: Form not found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        '500':
          description: Internal server error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'

    put:
      summary: Update form definition
      description: Update an existing form definition (full replacement)
      operationId: updateForm
      tags:
        - Forms
      parameters:
        - name: id
          in: path
          description: Form ID
          required: true
          schema:
            type: string
            pattern: '^[a-z0-9_-]+$'
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/FormDefinitionRoot'
      responses:
        '200':
          description: Form updated successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/FormDefinitionRoot'
        '400':
          description: Validation error or ID mismatch
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ValidationError'
        '404':
          description: Form not found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        '500':
          description: Internal server error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'

    delete:
      summary: Delete form definition
      description: Soft delete a form definition (sets is_active=false)
      operationId: deleteForm
      tags:
        - Forms
      parameters:
        - name: id
          in: path
          description: Form ID
          required: true
          schema:
            type: string
            pattern: '^[a-z0-9_-]+$'
      responses:
        '204':
          description: Form deleted successfully
        '404':
          description: Form not found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        '500':
          description: Internal server error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'

  /api/export/{id}/yaml:
    get:
      summary: Export form as YAML
      description: Generate and download YAML file compliant with DSL v0.1
      operationId: exportYaml
      tags:
        - Export
      parameters:
        - name: id
          in: path
          description: Form ID
          required: true
          schema:
            type: string
            pattern: '^[a-z0-9_-]+$'
      responses:
        '200':
          description: YAML file generated successfully
          content:
            application/x-yaml:
              schema:
                type: string
                format: binary
          headers:
            Content-Disposition:
              description: Attachment filename
              schema:
                type: string
                example: 'attachment; filename="form-id.yaml"'
        '404':
          description: Form not found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        '500':
          description: Internal server error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'

  /api/export/{id}/sql:
    get:
      summary: Generate SQL DDL for form
      description: Generate PostgreSQL DDL statements for table/grid widgets
      operationId: exportSql
      tags:
        - Export
      parameters:
        - name: id
          in: path
          description: Form ID
          required: true
          schema:
            type: string
            pattern: '^[a-z0-9_-]+$'
      responses:
        '200':
          description: SQL DDL generated successfully
          content:
            text/plain:
              schema:
                type: string
          headers:
            Content-Disposition:
              description: Attachment filename
              schema:
                type: string
                example: 'attachment; filename="form-id_schema.sql"'
        '404':
          description: Form not found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        '500':
          description: Internal server error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'

components:
  schemas:
    FormDefinitionRoot:
      type: object
      required:
        - form
      properties:
        form:
          $ref: '#/components/schemas/FormDefinition'

    FormDefinition:
      type: object
      required:
        - id
        - title
        - version
        - pages
      properties:
        id:
          type: string
          pattern: '^[a-z0-9_-]+$'
          example: 'safety-inspection-form'
        title:
          type: string
          minLength: 1
          maxLength: 200
          example: 'Safety Inspection Form'
        version:
          type: string
          example: '1.0'
        locale:
          type: array
          items:
            type: string
          example: ['en', 'bn']
        labels:
          type: object
          additionalProperties:
            type: string
        meta:
          $ref: '#/components/schemas/FormMetadata'
        options:
          $ref: '#/components/schemas/FormOptions'
        storage:
          $ref: '#/components/schemas/StorageOptions'
        pages:
          type: array
          minItems: 1
          items:
            $ref: '#/components/schemas/Page'

    Page:
      type: object
      required:
        - id
        - title
        - sections
      properties:
        id:
          type: string
          pattern: '^[a-z0-9_-]+$'
          example: 'page-1'
        title:
          type: string
          example: 'General Information'
        labels:
          type: object
          additionalProperties:
            type: string
        sections:
          type: array
          minItems: 1
          items:
            $ref: '#/components/schemas/Section'

    Section:
      type: object
      required:
        - id
        - title
        - widgets
      properties:
        id:
          type: string
          pattern: '^[a-z0-9_-]+$'
          example: 'section-1'
        title:
          type: string
          example: 'Basic Details'
        labels:
          type: object
          additionalProperties:
            type: string
        widgets:
          type: array
          items:
            $ref: '#/components/schemas/Widget'

    Widget:
      type: object
      required:
        - type
        - id
      properties:
        type:
          type: string
          enum: [field, group, table, grid, checklist]
        id:
          type: string
          pattern: '^[a-z0-9_-]+$'
        title:
          type: string
        labels:
          type: object
          additionalProperties:
            type: string
        when:
          type: string
        help:
          type: string
        field:
          $ref: '#/components/schemas/FieldSpec'
        fields:
          type: array
          items:
            $ref: '#/components/schemas/FieldSpec'
        layout:
          $ref: '#/components/schemas/LayoutSpec'
        table:
          $ref: '#/components/schemas/TableSpec'
        grid:
          $ref: '#/components/schemas/GridSpec'
        checklist:
          $ref: '#/components/schemas/ChecklistSpec'

    FieldSpec:
      type: object
      required:
        - name
        - label
        - type
      properties:
        name:
          type: string
          pattern: '^[a-z0-9_-]+$'
        label:
          type: string
        type:
          type: string
          enum: [string, text, integer, decimal, date, time, datetime, bool, enum, attachment, signature]
        required:
          type: boolean
        readonly:
          type: boolean
        placeholder:
          type: string
        default:
          oneOf:
            - type: string
            - type: number
            - type: boolean
        unit:
          type: string
        pattern:
          type: string
        min:
          oneOf:
            - type: number
            - type: string
        max:
          oneOf:
            - type: number
            - type: string
        enum:
          type: array
          items:
            type: string
        format:
          type: string
        compute:
          type: string
        override:
          type: boolean

    TableSpec:
      type: object
      required:
        - columns
      properties:
        row_mode:
          type: string
          enum: [infinite, finite]
        min:
          type: integer
        max:
          type: integer
        row_key:
          type: array
          items:
            type: string
        columns:
          type: array
          minItems: 1
          items:
            $ref: '#/components/schemas/ColumnSpec'
        row_generators:
          type: array
          items:
            $ref: '#/components/schemas/RowGenerator'
        aggregates:
          type: array
          items:
            $ref: '#/components/schemas/AggregateSpec'

    ColumnSpec:
      type: object
      required:
        - name
        - label
        - type
      properties:
        name:
          type: string
        label:
          type: string
        type:
          type: string
          enum: [string, text, integer, decimal, date, time, datetime, bool, enum]
        required:
          type: boolean
        readonly:
          type: boolean
        unit:
          type: string
        pattern:
          type: string
        min:
          oneOf:
            - type: number
            - type: string
        max:
          oneOf:
            - type: number
            - type: string
        enum:
          type: array
          items:
            type: string
        default:
          oneOf:
            - type: string
            - type: number
            - type: boolean
        formula:
          type: string
        format:
          type: string

    GridSpec:
      type: object
      required:
        - rows
        - columns
        - cell
      properties:
        rows:
          $ref: '#/components/schemas/GridRowSpec'
        columns:
          $ref: '#/components/schemas/GridColumnSpec'
        cell:
          $ref: '#/components/schemas/GridCellSpec'

    GridRowSpec:
      type: object
      required:
        - mode
      properties:
        mode:
          type: string
          enum: [finite, infinite]
        generator:
          type: object
        min:
          type: integer
        max:
          type: integer

    GridColumnSpec:
      type: object
      required:
        - generator
      properties:
        generator:
          type: object

    GridCellSpec:
      type: object
      required:
        - type
      properties:
        type:
          type: string
          enum: [string, integer, decimal, bool, enum]
        enum:
          type: array
          items:
            type: string
        default:
          oneOf:
            - type: string
            - type: number
            - type: boolean
        required:
          type: boolean
        help:
          type: string

    ChecklistSpec:
      type: object
      required:
        - items
      properties:
        items:
          type: array
          items:
            $ref: '#/components/schemas/ChecklistItem'

    ChecklistItem:
      type: object
      required:
        - key
        - label
        - type
      properties:
        key:
          type: string
        label:
          type: string
        type:
          type: string
          enum: [string, bool, enum]
        enum:
          type: array
          items:
            type: string
        default:
          oneOf:
            - type: string
            - type: boolean
        required:
          type: boolean

    LayoutSpec:
      type: object
      properties:
        columns:
          type: integer
          minimum: 1
          maximum: 12

    RowGenerator:
      type: object
      properties:
        type:
          type: string
          enum: [integer_range, date_range, time_range, enum]
        name:
          type: string
        from:
          type: integer
        to:
          type: integer
        step:
          type: integer
        start:
          type: string
        end:
          type: string
        step_minutes:
          type: integer
        values:
          type: array
          items:
            type: string

    AggregateSpec:
      type: object
      required:
        - name
        - label
        - expr
      properties:
        name:
          type: string
        label:
          type: string
        expr:
          type: string
        format:
          type: string

    FormMetadata:
      type: object
      properties:
        organization:
          type: string
        document_no:
          type: string
        effective_date:
          type: string
          format: date
        revision_no:
          type: string
        reference:
          type: string
        tags:
          type: array
          items:
            type: string

    FormOptions:
      type: object
      properties:
        print:
          type: object
          properties:
            page_size:
              type: string
              enum: [A4, Letter]
            margins_mm:
              type: object
              properties:
                top:
                  type: integer
                left:
                  type: integer
                right:
                  type: integer
                bottom:
                  type: integer
        permissions:
          type: object
          properties:
            roles:
              type: array
              items:
                type: string
            visibility:
              type: string
              enum: [public, private, role-based]

    StorageOptions:
      type: object
      properties:
        mode:
          type: string
          enum: [normalized, denormalized]
        copy_header:
          type: array
          items:
            type: string
        indexes:
          type: array
          items:
            type: array
            items:
              type: string

    FormSummary:
      type: object
      properties:
        form_id:
          type: string
        version:
          type: string
        title:
          type: string
        created_at:
          type: string
          format: date-time
        updated_at:
          type: string
          format: date-time
        is_active:
          type: boolean

    Error:
      type: object
      required:
        - message
      properties:
        message:
          type: string
        details:
          type: string

    ValidationError:
      type: object
      required:
        - message
        - errors
      properties:
        message:
          type: string
        errors:
          type: object
          additionalProperties:
            type: array
            items:
              type: string
